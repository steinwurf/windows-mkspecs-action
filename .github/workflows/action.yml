name: Windows C++ make-specs
on:
  workflow_call:
    inputs:
      extra_resolve_options:
        description: "Extra Resolve Options"
        type: string
        required: false
      test_command:
        description: "Test Command"
        type: string
        required: false
        default: python waf --run_tests
jobs:
  Windows-mkspecs:
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        config:
          - cxx_mkspec: cxx_msvc17_x86
            name: MSVC 17 32-bit
          - cxx_mkspec: cxx_msvc17_x64
            name: MSVC 17 64-bit
    runs-on: [self-hosted, "${{ matrix.config.cxx_mkspec }}", builder]
    name: ${{ matrix.config.name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure
        env:
          GIT_SSH_COMMAND: "ssh"
          EXTRA_RESOLVE_OPTIONS: ${{ inputs.extra_resolve_options }}
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 15
          command: python waf configure --git_protocol=git@ --cxx_mkspec=${{ matrix.config.cxx_mkspec }} ${{ env.EXTRA_RESOLVE_OPTIONS }}
      - name: Generate problem matcher
        run: |
          echo '{
            "problemMatcher": [
              {
                "owner": "msvc-problem-matcher",
                "severity": "error",
                "pattern": [
                  {
                    "regexp": "^(?:\\s+\\d+\\>)?([^\\s].*)\\((\\d+),?(\\d+)?(?:,\\d+,\\d+)?\\)\\s*:\\s+(error|warning|info)\\s+(\\w{1,2}\\d+)\\s*:\\s*(.*)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "severity": 4,
                    "code": 5,
                    "message": 6
                  }
                ]
              }
            ]
          }' > msvc-problem-matcher.json
      - name: Build
        run: |
          echo "::add-matcher::msvc-problem-matcher.json"
          python waf
      - name: Test
        env:
          TEST_COMMAND: ${{ inputs.test_command }}
        run: ${{ env.TEST_COMMAND }}
